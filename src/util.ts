import * as ts from 'typescript';
import commandLineUsage from 'command-line-usage';
import { writeFile } from 'fs';
import faker from 'faker';

import { Options, Output } from './type';
import { instructions } from './option';

export function isWelcomeMessageNeeded(options: Options) {
  if (!options || !options.file || options.help) {
    return true;
  }
  return false;
}

export function showWelcomeMessage() {
  const usage = commandLineUsage(instructions);
  console.log(usage);
}

export function getSourceFileOfNode(node: ts.Node): ts.SourceFile {
  while (node && node.kind !== ts.SyntaxKind.SourceFile) {
    node = node.parent;
  }
  return <ts.SourceFile>node;
}

export function format(text: string): string {
  return text.replace(/"([^"]+)":/g, "$1:").replace(/"/g, `'`);
}

export function writeToFile(options: Options, output: Output | Output[]) {
  const commentLine = `// THIS IS GENERATED BY TS-MOCK, DON'T EDIT IT \r\n`;
  const text = `${commentLine}export default ${JSON.stringify(
    output,
    null,
    2
  )}`;

  writeFile(
    options.outFile as string,
    options.format ? format(text) : text,
    (error) => {
      if (error) {
        console.log(error);
      }
    }
  );
}

export function generateAnyType() {
  const values = [...generateBasicValues(), generateObject()];
  return faker.random.arrayElement(values);
}

export function generateObject(): object {
  const objectKey = faker.random.word();
  const object = {
    [objectKey]: faker.random.arrayElement(generateBasicValues()),
  };
  return object;
}

function generateBasicValues(): Array<number | boolean | string> {
  const booleanItem = JSON.parse(faker.fake("{{datatype.boolean}}"));
  const numberItem = parseInt(faker.fake("{{datatype.number}}"), 10);
  const stringItem = faker.fake("{{lorem.text}}").substring(0, 50);
  return [booleanItem, numberItem, stringItem];
}
