import { readFileSync, writeFile } from "fs";

import * as ts from "typescript";
import commandLineArgs from 'command-line-args';
import commandLineUsage from 'command-line-usage'

import { processFile } from './lib'

import { Options, Output } from './type'

const output: Output = {};

const optionDefinitions = [
  {
    name: 'file',
    alias: 'f',
    type: String,
  },
  {name: 'interfaces', alias: 'i', type: String, multiple: true},
  {name: 'help', alias: 'h', type: Boolean},
  {name: 'fixed', alias: 'x', type: Boolean},
  {name: 'outFile', alias: 'o', type: String},
];

const instructions = [
  {
    content: 'mock-type',
    raw: true,
  },
  {
    header: '',
    content: 'Generates fake data from TypeScript interfaces via Faker',
  },
  {
    header: 'Options',
    optionList: [
      {
        name: 'interfaces',
        typeLabel: 'example: --interfaces "Person" "User"',
        description: 'Optional list of interfaces to mock, right now only support one interface',
      },
      {
        name: 'file',
        typeLabel: 'example: ./model.ts',
        description: 'Interface file to generate fake data from',
      },
      {
        name: 'outdir',
        typeLabel: 'example ./mock',
        description: 'Default directory will be mock under current path'
      },
      {
        name: 'help',
        description: 'Print this usage guide.',
      }
    ],
  },
];

function isWelcomeMessageNeeded(options: Options) {
  if (!options || !options.file || options.help) {
    return true;
  }

  return false;
}

function showWelcomeMessage() {
  const usage = commandLineUsage(instructions);
  console.log(usage);
}

function writeToFile(options: Options) {
  const commentLine = `// THIS IS GENERATED BY TS-MOCK, DON'T EDIT IT \r\n`;
  const data = `${commentLine}export default ${JSON.stringify(output, null ,2)}`;

  writeFile(options.outFile as string, data, error => {
    if (error) {
      console.log(error);
    }
  });
}

function main() {
  const options: Options = commandLineArgs(optionDefinitions) as Options;

  if (isWelcomeMessageNeeded(options)) {
    showWelcomeMessage();
    return;
  }


  const sourceFile = ts.createSourceFile(
    options.file,
    readFileSync(options.file).toString(),
    ts.ScriptTarget.ES2015,
    true
  );

  processFile(sourceFile, options, output)

  console.log(JSON.stringify(output));

  if (options.outFile) {
    writeToFile(options);
  }
}

main();
